const int maxN = 100005;

struct edge{
    int src, dest, weight;
};

int par[maxN] = {0};

int find_set(int v) {
    if(v == par[v]){
        return v;
    } 
    return par[v] = find_set(par[v]);
}
 
void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if(a != b){
        par[b] = a;
    }
    return;
}

void solve(){
    int n, e;
    cin >> n >> e;
    for(int i = 0; i < n; i++){
        par[i] = i;
    }
    vector<edge> adj, res;
    for(int i = 0; i < e; i++){
        edge node;
        cin >> node.src >> node.dest >> node.weight;
        adj.pb(node);
    }
    sort(adj.begin(), adj.end(), [](edge a, edge b){
        return a.weight < b.weight;
    });
    int count = 0, idx = 0;
    while(count < n - 1 && idx < e){
        edge curr = adj[idx];
        int v1 = curr.src, v2 = curr.dest;
        if(find_set(v1) != find_set(v2)){
            res.pb(curr);
            union_sets(v1, v2);
            count++;
        }
        idx++;
    }
    for(int i = 0; i < (int)res.size(); i++){
        if(res[i].src > res[i].dest) swap(res[i].src, res[i].dest);
        cout << res[i].src << " " << res[i].dest << " " << res[i].weight << "\n";
    }
    return;
}