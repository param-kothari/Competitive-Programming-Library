int lps[maxN];

void fill_lps(string s){
    int n = (int)s.size();
    lps[0] = 0;
    int i = 1, j = 0;
    while(i < n){
        if(s[i] == s[j]){
            lps[i] = j + 1;
            i++;
            j++;
        }
        else{
            if(j != 0){
                j = lps[j - 1];
            }
            else{
                lps[i] = 0;
                i++;
            }
        }
    }
    return;
}

vector<int> kmp(string s, string t){
    int n = (int)s.size();
    int m = (int)t.size();
    fill_lps(t);
    int i = 0, j = 0;
    vector<int> all_idx;
    while(i < n){
        if(s[i] == t[j]){
            i++;
            j++;
        }
        if(j == m){
            all_idx.push_back(i - j);
            j = lps[j - 1];
        }
        else if(i < n && s[i] != t[j]){
            if(j != 0){
                j = lps[j - 1];
            }
            else{
                i++;
            }
        }
    }
    return all_idx;
}